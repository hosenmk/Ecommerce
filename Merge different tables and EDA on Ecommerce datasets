# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

1. Data Loading and Preprocessing
# Mount dataset
from google.colab import drive
drive.mount('/content/drive')
dataset_ecommerce = '/content/drive/MyDrive/project/ecommerce.xlsx'

fact_table = pd.read_excel(dataset_ecommerce, sheet_name='Fact_table')
trans_dim = pd.read_excel(dataset_ecommerce, sheet_name='Trans_dim')
item_dim = pd.read_excel(dataset_ecommerce, sheet_name='Item_dim')
customer_dim = pd.read_excel(dataset_ecommerce, sheet_name='Customer_dim')
time_dim = pd.read_excel(dataset_ecommerce, sheet_name='Time_dim')
store_dim = pd.read_excel(dataset_ecommerce, sheet_name='Store_dim')

# Marged all tables
dataset_ecommerce = fact_table.merge(trans_dim, on='trans_key', how='left') \
                .merge(item_dim, on='item_key', how='left') \
                .merge(customer_dim, on='customer_key', how='left') \
                .merge(time_dim, on='time_key', how='left') \
                .merge(store_dim, on='store_key', how='left')

dataset_ecommerce
dataset_ecommerce.head()
dataset_ecommerce.columns
dataset_ecommerce.info()
dataset_ecommerce.describe()

# Slicing of Datasets
# slicing rows and columns
# rows_indexes, column_indexes
dataset_ecommerce.loc[:,:]

# selecting columns as list
dataset_ecommerce.loc[:,'trans_type':'hour']

# selecting columns as list
dataset_ecommerce.loc[:,'store_size':'division_y']

# selecting columns as list
dataset_ecommerce.loc[5:20,['store_size', 'trans_type']]

# Convert categorical to numerical using a dictionary mapping
dataset_ecommerce['trans_type'] = dataset_ecommerce['trans_type'].map({'cash': 1, 'card': 2, 'mobile': 3})
dataset_ecommerce['store_size'] = dataset_ecommerce['store_size'].map({'high': 1, 'medium': 2, 'small': 3})

# if i want to drop rowwise
# Rowwise drop : axis = 0
# A = dataset_ecommerce.drop([0, 2, 4, 6, 8, 10, 12], axis = 0)

# But i will drop column wise
# Column wise drop : axis = 1
ecommerce = dataset_ecommerce.drop(['unit_x','bank_name','item_name','desc','man_country','upazila_x','upazila_y','supplier','unit_y','week','name','district_x','division_x','district_y','division_y'], axis = 1)
ecommerce

# Check missing value
ecommerce.isnull()

# Check for duplicate rows in Ecommerce
duplicate_rows_ecommerce = ecommerce[ecommerce.duplicated()]
print("Duplicate Rows in Ecommerce dataset:")
print(duplicate_rows_ecommerce)

# Check for duplicate columns in Ecommerce dataset (by checking if column names are duplicated)
duplicate_cols_ecommerce = ecommerce.columns[ecommerce.columns.duplicated()]
print("\nDuplicate Columns in ecommerce dataset:")
duplicate_cols_ecommerce

ecommerce.drop_duplicates(inplace=True)  # Removing duplicate rows

df2 = ecommerce
df2

# Exploratory Data Analysis (EDA)
# Calculate mean, median, mode, standard deviation, and skewness
print("\ndf2 Statistics:")
print("Mean:\n", df2.mean(numeric_only=True))
print("\nMedian:\n", df2.median(numeric_only=True))
print("\nMode:\n", df2.mode().iloc[0])  # Mode can have multiple values, so we take the first one
print("\nStandard Deviation:\n", df2.std(numeric_only=True))
print("\nSkewness:\n", df2.skew(numeric_only=True))

# Visualize distributions using histograms, boxplots, and KDE plots

# Histograms
df2.hist(figsize=(12, 10), bins=20)
plt.suptitle("Histograms of Boston Features", fontsize=16)
plt.show()

# Boxplots
df2.plot(kind='box', subplots=True, layout=(4, 5), figsize=(15, 10), sharex=False, sharey=False)
plt.suptitle("Boxplots of Boston Features", fontsize=16)
plt.show()

# KDE plots
for column in df2.columns:
  if pd.api.types.is_numeric_dtype(df2[column]): # Check if the column is numeric
    sns.kdeplot(df2[column])
    plt.title(f'KDE Plot of {column}')
    plt.show()
  else:
    print(f"Skipping KDE plot for '{column}' as it is not numeric.")


# Identify correlations: Use a heatmap to display relationships between variables of df2 (Ecommerce)
# Select only numeric columns for correlation calculation
numeric_df2 = df2.select_dtypes(include=np.number)

plt.figure(figsize=(12, 10))
sns.heatmap(numeric_df2.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Ecommerce')
plt.show()

# Identify outliers using scatter plots
for col1 in df2.columns:
    for col2 in df2.columns:
        if col1 != col2 and pd.api.types.is_numeric_dtype(df2[col1]) and pd.api.types.is_numeric_dtype(df2[col2]):
            plt.figure(figsize=(8, 6))
            plt.scatter(df2[col1], df2[col2])
            plt.xlabel(col1)
            plt.ylabel(col2)
            plt.title(f"Scatter Plot of {col1} vs {col2} (df2)")
            plt.show()

